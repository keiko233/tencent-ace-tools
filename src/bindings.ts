/** tauri-specta globals **/

import {
  Channel as TAURI_CHANNEL,
  invoke as TAURI_INVOKE,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable */
// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async greet(name: string): Promise<string> {
    return await TAURI_INVOKE("greet", { name });
  },
  async isRunningAsAdmin(): Promise<Result<boolean, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("is_running_as_admin") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async getAllAceGuardProcesses(): Promise<Result<ProcessInfo[], string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("get_all_ace_guard_processes"),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async optimizeAllAceGuardProcesses(): Promise<Result<string, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("optimize_all_ace_guard_processes"),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async getControllerPrivilegesStatus(): Promise<Result<boolean, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("get_controller_privileges_status"),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async getAllWindows(): Promise<Result<WindowInfo[], string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("get_all_windows") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async tryCaptureImageByWindowId(
    windowId: number,
  ): Promise<Result<ScreenShot, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("try_capture_image_by_window_id", {
          windowId,
        }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async ocrScreenRegion(
    region: OcrRegion,
  ): Promise<Result<OcrResponse, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("ocr_screen_region", { region }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async ocrImageRegion(
    imageData: number[],
    region: OcrRegion,
  ): Promise<Result<OcrResponse, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("ocr_image_region", { imageData, region }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async ocrFullScreen(): Promise<Result<OcrResponse, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("ocr_full_screen") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  logEvent: LogEvent;
}>({
  logEvent: "log-event",
});

/** user-defined constants **/

/** user-defined types **/

export type LogEvent = {
  level: LogLevel;
  target: string;
  message: string;
  timestamp: string;
  fields: Partial<{ [key in string]: string }>;
};
export type LogLevel = "TRACE" | "DEBUG" | "INFO" | "WARN" | "ERROR";
export type OcrRegion = { x: number; y: number; width: number; height: number };
export type OcrResponse = {
  results: OcrResult[];
  full_text: string;
  success: boolean;
};
export type OcrResult = { text: string; confidence: number; region: OcrRegion };
export type ProcessInfo = {
  process_id: number;
  process_name: string;
  process_path: string;
  priority_modified: boolean;
  affinity_modified: boolean;
  current_priority: string;
  current_affinity: string;
  is_optimized: boolean;
};
export type ScreenShot = {
  image_data: number[];
  width: number;
  height: number;
  format: string;
};
export type WindowInfo = { title: string; process_id: number };

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
